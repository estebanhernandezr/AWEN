# -*- coding: utf-8 -*-
"""DataEncryptionStandard

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KAe65X4Ta2QeDKZSzs33AQIN5pUY_ySn

Funciones auxiliares ...
"""

def XOR_bit(p, q):
    if p == 0 and q == 0:
        return 0
    elif p == 0 and q == 1:
        return 1
    elif p == 1 and q == 0:
        return 1
    else:
        return 0

def XOR_cad(s, t):
    cad = []
    for i in range(len(s)):
        cad.append(XOR_bit(s[i], t[i]))
    return cad

def dec2bin(n, e):
    bin = [0 for i in range(e)]
    m=n
    idx = 0
    while m >= 1:
        bin[idx] = (m%2)
        m = int(m/2)
        idx += 1
    bin.reverse()
    return bin

def bin2dec(bits):
    bits.reverse()
    dec = 0
    exp = 0
    for i in range(len(bits)):
        dec += bits[i]*(2**(exp))
        exp += 1
    return dec

"""Clase DES ..."""

class DES:
    S1 = [
          [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
          [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
          [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
          [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]  
         ]
    S2 = [
          [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
          [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
          [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
          [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
         ]
    S3 = [
          [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
          [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
          [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
          [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
         ] 
    S4 = [
          [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
          [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
          [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
          [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14] 
         ]
    S5 = [
          [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
          [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
          [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
          [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]
         ]
    S6 = [
          [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
          [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
          [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
          [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]
         ]
    S7 = [
          [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
          [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
          [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
          [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]
         ]
    S8 = [
          [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
          [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
          [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
          [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
         ]

    def __init__(self, bit48):
        self.__key = bit48
    
    def cipher(self, bit64):
        bit64_cif = self.round(bit64)
        return (bit64_cif)

    def decipher(self, bit64):
        bit32_izq_cif = bit64[:32]
        bit32_der_cif  = bit64[32:]
        bit64_dec = self.round(bit32_der_cif + bit32_izq_cif)
        bit32_izq_dec = bit64_dec[:32]
        bit32_der_dec = bit64_dec[32:]
        return (bit32_der_dec + bit32_izq_dec)

    def round(self, bit64):
        bit32_izq = bit64[: 32]
        bit32_der = bit64[32 :]
        bit32_xor = XOR_cad(bit32_izq, self.F(bit32_der))
        return (bit32_der + bit32_xor)

    def F(self, bit32):
        bit48 = self.expansion(bit32)
        bit48_xor = XOR_cad(bit48, self.__key)
        bit32_sbox = self.s_box(bit48_xor)
        return bit32_sbox

    def s_box(self, bit48):
        s1 = dec2bin(DES.S1[bin2dec([bit48[0], bit48[5]])][bin2dec(bit48[1:4])], 4)
        s2 = dec2bin(DES.S2[bin2dec([bit48[6], bit48[11]])][bin2dec(bit48[7:10])], 4)
        s3 = dec2bin(DES.S3[bin2dec([bit48[12], bit48[17]])][bin2dec(bit48[13:16])], 4)
        s4 = dec2bin(DES.S4[bin2dec([bit48[18], bit48[23]])][bin2dec(bit48[19:22])], 4)
        s5 = dec2bin(DES.S5[bin2dec([bit48[24], bit48[29]])][bin2dec(bit48[25:28])], 4)
        s6 = dec2bin(DES.S6[bin2dec([bit48[30], bit48[35]])][bin2dec(bit48[31:34])], 4)
        s7 = dec2bin(DES.S7[bin2dec([bit48[36], bit48[41]])][bin2dec(bit48[37:40])], 4)
        s8 = dec2bin(DES.S8[bin2dec([bit48[42], bit48[47]])][bin2dec(bit48[43:46])], 4)
        return (s1+s2+s3+s4+s5+s6+s7+s8)

    def expansion(self, bit32):
        bit48 = []
        for i in range(0, 48, 1):
            bit48.append(0)
            
        bit48[0] = bit32[31]
        bit48[1] = bit32[0]
        bit48[2] = bit32[1]
        bit48[3] = bit32[2]
        bit48[4] = bit32[3]
        bit48[5] = bit32[4]
        bit48[6] = bit32[3]
        bit48[7] = bit32[4]
        bit48[8] = bit32[5]
        bit48[9] = bit32[6]
        bit48[10] = bit32[7]
        bit48[11] = bit32[8]
        bit48[12] = bit32[7]
        bit48[13] = bit32[8]
        bit48[14] = bit32[9]
        bit48[15] = bit32[10]
        bit48[16] = bit32[11]
        bit48[17] = bit32[12]
        bit48[18] = bit32[11]
        bit48[19] = bit32[12]
        bit48[20] = bit32[13]
        bit48[21] = bit32[14]
        bit48[22] = bit32[15]
        bit48[23] = bit32[16]
        bit48[24] = bit32[15]
        bit48[25] = bit32[16]
        bit48[26] = bit32[17]
        bit48[27] = bit32[18]
        bit48[28] = bit32[19]
        bit48[29] = bit32[20]
        bit48[30] = bit32[19]
        bit48[31] = bit32[20]
        bit48[32] = bit32[21]
        bit48[33] = bit32[22]
        bit48[34] = bit32[23]
        bit48[35] = bit32[24]
        bit48[36] = bit32[23]
        bit48[37] = bit32[24]
        bit48[38] = bit32[25]
        bit48[39] = bit32[26]
        bit48[40] = bit32[27]
        bit48[41] = bit32[29]
        bit48[42] = bit32[27]
        bit48[43] = bit32[28]
        bit48[44] = bit32[29]
        bit48[45] = bit32[30]
        bit48[46] = bit32[31]
        bit48[47] = bit32[0]
        return bit48

""" Debugging ...

key = [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1]
txt = [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1]

des = DES(key)

txt_cif = des.cipher(txt)
txt_dec = des.decipher(txt_cif)

print("texto ingresado : ", txt)
print("texto recuperado: ", txt_dec)
print("\nCoincidencia:", txt_dec == txt)

print(txt[32:])     # Ãšltimos 32 bits del texto claro
print(txt_cif[:32]) # Primeros 32 bits del texto cifrado
print(txt_dec[32:]) # Primeros 32 bits del texto decifrado

print(txt[32:] == txt_cif[: 32] == txt_dec[32:])

"""